-- 1) Loyal User Reward: Identify the five oldest users
SELECT * 
FROM users
ORDER BY created_at
LIMIT 5;

-- 2) Inactive User Engagement: Users who have never posted a single photo
SELECT * 
FROM users
LEFT JOIN photos
ON users.id = photos.user_id
WHERE photos.user_id IS NULL;

-- 3) Contest Winner Declaration: Photo with highest likes
SELECT 
    users.username, 
    photos.id, 
    photos.image_url, 
    COUNT(likes.user_id) AS total_likes
FROM photos
INNER JOIN likes ON likes.photo_id = photos.id
INNER JOIN users ON photos.user_id = users.id
GROUP BY photos.id
ORDER BY total_likes DESC
LIMIT 1;

-- 4) Hashtag Research: Top 5 most commonly used hashtags
SELECT 
    tags.tag_name, 
    COUNT(*) AS total_tags
FROM photo_tags
JOIN tags ON photo_tags.tag_id = tags.id
GROUP BY tags.id
ORDER BY total_tags DESC
LIMIT 5;

-- 5) AD Campaign Launch: Most popular day for user registrations
SELECT 
    DAYNAME(created_at) AS day, 
    COUNT(*) AS total_reg
FROM users
GROUP BY day
ORDER BY total_reg DESC
LIMIT 1;

-- 6) User Engagement: Average number of posts per user
SELECT (
    SELECT COUNT(*) FROM photos
) / (
    SELECT COUNT(*) FROM users
) AS avg_posts_per_user;

-- 7) Bots & Fake Accounts (Query 1): Users who liked every photo
SELECT 
    user_id, 
    COUNT(*) AS tot_num_likes
FROM likes
GROUP BY user_id
HAVING tot_num_likes = (
    SELECT COUNT(*) FROM photos
);

-- 7) Bots & Fake Accounts (Query 2): Usernames of those users
SELECT 
    users.username, 
    COUNT(*) AS tot_num_likes
FROM users
JOIN likes ON users.id = likes.user_id
GROUP BY users.id
HAVING tot_num_likes = (
    SELECT COUNT(*) FROM photos
);
